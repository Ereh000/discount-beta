<div class="product-bundle-container" id="product-bundle-container">
  <h2 class="bundle-heading"></h2>

  <div class="bundle-products" id="bundle-products">
    <!-- Products will be dynamically inserted here -->
  </div>

  <div class="bundle-summary">
    <div class="bundle-total">
      <span>Total:</span>
      <div class="bundle-prices">
        <span class="bundle-current-price" id="bundle-current-price">
          {{- block.settings.bundle_price | default: 10999 | money -}}
        </span>
        <span class="bundle-compare-price" id="bundle-compare-price">
          {{- block.settings.bundle_compare_price | default: 13999 | money -}}
        </span>
      </div>
      <div class="bundle-discount-badge">
        <span id="discount-text">{{ block.settings.discount_text }}</span>
      </div>
    </div>

    <button class="bundle-add-to-cart" id="bundle-add-to-cart">
      {{ block.settings.button_text }}
    </button>
  </div>
</div>

<!-- Rest of the CSS remains unchanged -->

{% schema %}
{
  "name": "Product Bundle",
  "target": "section",
  "stylesheet": "main.css",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Frequently bought together"
    },
    {
      "type": "product_list",
      "id": "products",
      "label": "Products",
      "limit": 5
    },
    {
      "type": "text",
      "id": "bundle_price",
      "label": "Bundle Price",
      "info": "Enter the discounted price for the bundle"
    },
    {
      "type": "text",
      "id": "bundle_compare_price",
      "label": "Bundle Compare Price",
      "info": "Enter the original total price for comparison"
    },
    {
      "type": "text",
      "id": "discount_text",
      "label": "Discount Text",
      "default": "Unlock Your Discount"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Claim Offer"
    }
  ]
}
{% endschema %}

<script>
  window.addEventListener('DOMContentLoaded', function () {
    const shop = shopUrl;

    fetch(`${shop}/apps/product/product-bundle`)
      .then((response) => response.json())
      .then((data) => {
        if (data.bundles && data.bundles.length > 0) {
          const bundle = data.bundles[0];
          console.log('Bundle:', bundle);

          // bundle Response --------
          //      {
          //       id: 7,
          //       createdAt: 2025-04-19T18:05:53.656Z,
          //       updatedAt: 2025-04-19T19:00:39.297Z,
          //       shop: 'test-shop',
          //       status: 'published',
          //       name: 'Bundle Sharingan Plus 1',
          //       settings: {
          //         header: 'Frequently bought together 1',
          //         alignment: 'center',
          //         footer: 'Total :',
          //         button: 'Claim Offer',
          //         position: 'all',
          //         publishOption: 'immediately',
          //         template: 'prestige',
          //         color: 'purple',
          //         pricing: {
          //           option: 'default',
          //           discountPercentage: '10',
          //           fixedDiscount: '25',
          //           fixedPrice: '99'
          //         },
          //         highlight: {
          //           option: 'text',
          //           title: 'Unlock Your Discount',
          //           timerTitle: 'Offer ends in',
          //           isBlinking: false,
          //           style: 'solid',
          //           timerEndDate: '',
          //           timerFormat: 'dd:hh:mm:ss'
          //         },
          //         typography: {
          //           header: [Object],
          //           titlePrice: [Object],
          //           quantityPrice: [Object],
          //           highlight: [Object]
          //         },
          //         spacing: {
          //           bundleTop: '18',
          //           bundleBottom: '6',
          //           footerTop: '15',
          //           footerBottom: '10'
          //         },
          //         shapes: { bundle: 'Rounded', footer: 'Rounded', addToCart: 'Rounded'
          // },
          //         productImageSize: '55',
          //         iconStyle: 'Plus 5',
          //         borderThickness: { bundle: '1', footer: '0', addToCart: '2' },
          //         colors: {
          //           background: '',
          //           border: '#E1E3E5',
          //           footerBackground: '#F6F6F7',
          //           buttonBackground: '',
          //           buttonBorder: '',
          //           highlightBackground: '#FF6B6B',
          //           quantityBackground: '',
          //           price: '#000000',
          //           comparedPrice: '#FF0000',
          //           headerText: '#000000',
          //           titleText: '#000000',
          //           highlightText: '#FFFFFF',
          //           addToCartText: '#FFFFFF',
          //           quantityText: '#000000',
          //           footerText: '#000000'
          //         },
          //         general: {
          //           variantChoice: true,
          //           showPrices: false,
          //           showComparePrice: true,
          //           skipCart: false,
          //           redirectToProduct: true,
          //           redirectToNewTab: true
          //         }
          //       },
          //       products: [
          //         {
          //           id: 16,
          //           bundleId: 7,
          //           productId: 'gid://shopify/Product/7299722543198',
          //           productHandle: 'ascent-half-shell-camo-jacket',
          //           name: 'Ascent Half Shell Camo Jacket',
          //           quantity: 3,
          //           image:
          // 'https://cdn.shopify.com/s/files/1/0576/5391/9838/files/AscentHalfShellCamoJacketDirtCamo.jpg?v=1737481696',
          //           createdAt: 2025-04-19T18:05:53.677Z,
          //           updatedAt: 2025-04-19T18:05:53.677Z
          //         },
          //         {
          //           id: 17,
          //           bundleId: 7,
          //           productId: 'gid://shopify/Product/7299724705886',
          //           productHandle: 'baseline-pull-on-zip-top',
          //           name: 'Baseline Pull-on Zip Top',
          //           quantity: 1,
          //           image:
          // 'https://cdn.shopify.com/s/files/1/0576/5391/9838/files/BaselinePull-onZipTop_Navy-Front.jpg?v=1737481992',
          //           createdAt: 2025-04-19T18:05:53.677Z,
          //           updatedAt: 2025-04-19T18:05:53.677Z
          //         },
          //         {
          //           id: 18,
          //           bundleId: 7,
          //           productId: 'gid://shopify/Product/7353513312350',
          //           productHandle: 'acanthus-1879-1881',
          //           name: 'Acanthus, 1879-1881',
          //           quantity: 3,
          //           image:
          // 'https://cdn.shopify.com/s/files/1/0576/5391/9838/files/15.webp?v=1742407605',
          //           createdAt: 2025-04-19T18:05:53.677Z,
          //           updatedAt: 2025-04-19T18:05:53.677Z
          //         }
          //       ]
          //     }

          // Update bundle heading
          const bundleHeading = document.querySelector('.bundle-heading');
          if (bundleHeading && bundle.settings && bundle.settings.header) {
            bundleHeading.textContent = bundle.settings.header;
          }

          // Update discount text
          const discountText = document.getElementById('discount-text');
          if (discountText && bundle.settings && bundle.settings.highlight && bundle.settings.highlight.title) {
            discountText.textContent = bundle.settings.highlight.title;
          }

          // Update button text
          const addToCartButton = document.getElementById('bundle-add-to-cart');
          if (addToCartButton && bundle.settings && bundle.settings.button) {
            addToCartButton.textContent = bundle.settings.button;
          }

          // Apply styling from bundle settings
          applyBundleStyling(bundle.settings);

          // Fetch products for this bundle
          fetchBundleProducts(bundle.id, bundle);
        }
      })
      .catch((error) => console.error('Error fetching bundle data:', error));
  });

  function applyBundleStyling(settings) {
    if (!settings) return;

    const container = document.querySelector('.product-bundle-container');
    const bundleTotal = document.querySelector('.bundle-total');
    const discountBadge = document.querySelector('.bundle-discount-badge');
    const addToCartButton = document.querySelector('.bundle-add-to-cart');

    // Apply colors
    if (settings.colors) {
      // Container background
      if (settings.colors.background) {
        container.style.backgroundColor = settings.colors.background;
      }

      // Footer background
      if (settings.colors.footerBackground) {
        bundleTotal.style.backgroundColor = settings.colors.footerBackground;
      }

      // Highlight background
      if (settings.colors.highlightBackground) {
        discountBadge.style.backgroundColor = settings.colors.highlightBackground;
      }

      // Button background
      if (settings.colors.buttonBackground) {
        addToCartButton.style.backgroundColor = settings.colors.buttonBackground;
      }

      // Text colors
      if (settings.colors.headerText) {
        document.querySelector('.bundle-heading').style.color = settings.colors.headerText;
      }

      if (settings.colors.highlightText) {
        discountBadge.style.color = settings.colors.highlightText;
      }

      if (settings.colors.addToCartText) {
        addToCartButton.style.color = settings.colors.addToCartText;
      }

      if (settings.colors.footerText) {
        bundleTotal.style.color = settings.colors.footerText;
      }
    }

    // Apply spacing
    if (settings.spacing) {
      if (settings.spacing.bundleTop) {
        container.style.paddingTop = `${settings.spacing.bundleTop}px`;
      }

      if (settings.spacing.bundleBottom) {
        container.style.paddingBottom = `${settings.spacing.bundleBottom}px`;
      }

      if (settings.spacing.footerTop) {
        bundleTotal.style.marginTop = `${settings.spacing.footerTop}px`;
      }

      if (settings.spacing.footerBottom) {
        bundleTotal.style.marginBottom = `${settings.spacing.footerBottom}px`;
      }
    }

    // Apply border radius based on shapes
    if (settings.shapes) {
      if (settings.shapes.bundle === 'Rounded') {
        document.querySelectorAll('.bundle-product').forEach((el) => {
          el.style.borderRadius = '8px';
        });
      } else if (settings.shapes.bundle === 'Square') {
        document.querySelectorAll('.bundle-product').forEach((el) => {
          el.style.borderRadius = '0px';
        });
      }

      if (settings.shapes.footer === 'Rounded') {
        bundleTotal.style.borderRadius = '8px';
      } else if (settings.shapes.footer === 'Square') {
        bundleTotal.style.borderRadius = '0px';
      }

      if (settings.shapes.addToCart === 'Rounded') {
        addToCartButton.style.borderRadius = '8px';
      } else if (settings.shapes.addToCart === 'Square') {
        addToCartButton.style.borderRadius = '0px';
      }
    }
  }

  function fetchBundleProducts(bundleId, bundle) {
    // console.log('bundleId, bundle', bundleId, bundle);
    const shop = shopUrl;
    fetch(`${shop}/apps/product/product-bundle?bundleId=${bundleId}`)
      .then((response) => response.json())
      .then((data) => {
        // const products = data;
        console.log('data.', data);
        // console.log('data.fetchedProducts', data.fetchedProducts);

        // data.fetchedProducts[0].product Response:
        //       {
        // "data": {
        //   "nodes": [
        //     {
        //       "id": "gid://shopify/Product/7299722543198",
        //       "title": "Ascent Half Shell Camo Jacket",
        //       "handle": "ascent-half-shell-camo-jacket",
        //       "productType": "Jackets",
        //       "publishedAt": "2025-04-14T06:36:16Z",
        //       "createdAt": "2025-01-21T17:48:16Z",
        //       "updatedAt": "2025-04-14T06:36:16Z",
        //       "priceRangeV2": {
        //         "minVariantPrice": {
        //           "amount": "29.99",
        //           "currencyCode": "INR"
        //         },
        //         "maxVariantPrice": {
        //           "amount": "29.99",
        //           "currencyCode": "INR"
        //         }
        //       },
        //       "compareAtPriceRange": {
        //         "minVariantCompareAtPrice": {
        //           "amount": "79.99",
        //           "currencyCode": "INR"
        //         },
        //         "maxVariantCompareAtPrice": {
        //           "amount": "79.99",
        //           "currencyCode": "INR"
        //         }
        //       },
        //       "options": [
        //         {
        //           "name": "Size",
        //           "values": [
        //             "XS",
        //             "S",
        //             "M",
        //             "L",
        //             "XL",
        //             "2XL",
        //             "3XL",
        //             "4XL",
        //             "5XL"
        //           ]
        //         },
        //         {
        //           "name": "Color",
        //           "values": [
        //             "Dirt Camo"
        //           ]
        //         }
        //       ],
        //       "variants": {
        //         "nodes": [
        //           {
        //             "id": "gid://shopify/ProductVariant/41399052337246",
        //             "title": "XS / Dirt Camo",
        //             "sku": "RLCSJAHSDB0",
        //             "price": "29.99",
        //             "compareAtPrice": "79.99",
        //             "selectedOptions": [
        //               {
        //                 "name": "Size",
        //                 "value": "XS"
        //               },
        //               {
        //                 "name": "Color",
        //                 "value": "Dirt Camo"
        //               }
        //             ]
        //           },
        //           {
        //             "id": "gid://shopify/ProductVariant/41399052370014",
        //             "title": "S / Dirt Camo",
        //             "sku": "RLCSJAHSDB1",
        //             "price": "29.99",
        //             "compareAtPrice": "79.99",
        //             "selectedOptions": [
        //               {
        //                 "name": "Size",
        //                 "value": "S"
        //               },
        //               {
        //                 "name": "Color",
        //                 "value": "Dirt Camo"
        //               }
        //             ]
        //           },
        //           {
        //             "id": "gid://shopify/ProductVariant/41399052402782",
        //             "title": "M / Dirt Camo",
        //             "sku": "RLCSJAHSDB2",
        //             "price": "29.99",
        //             "compareAtPrice": "79.99",
        //             "selectedOptions": [
        //               {
        //                 "name": "Size",
        //                 "value": "M"
        //               },
        //               {
        //                 "name": "Color",
        //                 "value": "Dirt Camo"
        //               }
        //             ]
        //           },
        //           {
        //             "id": "gid://shopify/ProductVariant/41399052435550",
        //             "title": "L / Dirt Camo",
        //             "sku": "RLCSJAHSDB3",
        //             "price": "29.99",
        //             "compareAtPrice": "79.99",
        //             "selectedOptions": [
        //               {
        //                 "name": "Size",
        //                 "value": "L"
        //               },
        //               {
        //                 "name": "Color",
        //                 "value": "Dirt Camo"
        //               }
        //             ]
        //           },
        //           {
        //             "id": "gid://shopify/ProductVariant/41399052468318",
        //             "title": "XL / Dirt Camo",
        //             "sku": "RLCSJAHSDB4",
        //             "price": "29.99",
        //             "compareAtPrice": "79.99",
        //             "selectedOptions": [
        //               {
        //                 "name": "Size",
        //                 "value": "XL"
        //               },
        //               {
        //                 "name": "Color",
        //                 "value": "Dirt Camo"
        //               }
        //             ]
        //           },
        //           {
        //             "id": "gid://shopify/ProductVariant/41399052501086",
        //             "title": "2XL / Dirt Camo",
        //             "sku": "RLCSJAHSDB5",
        //             "price": "29.99",
        //             "compareAtPrice": "79.99",
        //             "selectedOptions": [
        //               {
        //                 "name": "Size",
        //                 "value": "2XL"
        //               },
        //               {
        //                 "name": "Color",
        //                 "value": "Dirt Camo"
        //               }
        //             ]
        //           },
        //           {
        //             "id": "gid://shopify/ProductVariant/41399052533854",
        //             "title": "3XL / Dirt Camo",
        //             "sku": "RLCSJAHSDB6",
        //             "price": "29.99",
        //             "compareAtPrice": "79.99",
        //             "selectedOptions": [
        //               {
        //                 "name": "Size",
        //                 "value": "3XL"
        //               },
        //               {
        //                 "name": "Color",
        //                 "value": "Dirt Camo"
        //               }
        //             ]
        //           },
        //           {
        //             "id": "gid://shopify/ProductVariant/41399052566622",
        //             "title": "4XL / Dirt Camo",
        //             "sku": "RLCSJAHSDB7",
        //             "price": "29.99",
        //             "compareAtPrice": "79.99",
        //             "selectedOptions": [
        //               {
        //                 "name": "Size",
        //                 "value": "4XL"
        //               },
        //               {
        //                 "name": "Color",
        //                 "value": "Dirt Camo"
        //               }
        //             ]
        //           },
        //           {
        //             "id": "gid://shopify/ProductVariant/41399052599390",
        //             "title": "5XL / Dirt Camo",
        //             "sku": "RLCSJAHSDB8",
        //             "price": "29.99",
        //             "compareAtPrice": "79.99",
        //             "selectedOptions": [
        //               {
        //                 "name": "Size",
        //                 "value": "5XL"
        //               },
        //               {
        //                 "name": "Color",
        //                 "value": "Dirt Camo"
        //               }
        //             ]
        //           }
        //         ]
        //       },
        //       "featuredImage": {
        //         "url": "https://cdn.shopify.com/s/files/1/0576/5391/9838/files/AscentHalfShellCamoJacketDirtCamo.jpg?v=1737481696"
        //       }
        //     }
        //   ]
        // },
        if (data.fetchedProducts && data.fetchedProducts.length > 0) {
          // console.log('length avaibale');
          renderBundleProducts(data.fetchedProducts, bundle);
          calculateBundlePricing(data.fetchedProducts, data.bundle.settings.pricing);
        }
      })
      .catch((error) => console.error('Error fetching bundle products:', error));
  }

  function renderBundleProducts(products, bundle) {
    const bundleProductsContainer = document.getElementById('bundle-products');
    bundleProductsContainer.innerHTML = '';

    products.forEach((product, index) => {
      console.log('product', product);
      // console.log('product.vaiants', product.variants.nodes);
      const productElement = document.createElement('div');
      productElement.className = 'bundle-product';
      productElement.setAttribute('data-product-id', product.id);

      // Set the first variant ID by default
      if (product.variants && product.variants.nodes && product.variants.nodes.length > 0) {
        productElement.setAttribute('data-variant-id', product.variants.nodes[0].id);
      }

      productElement.innerHTML = `
          <div class="bundle-product-wrapper">
            <div class="product-image">
            ${
              product.featuredImage &&
              `<img src="${product.featuredImage.url || ''}" alt="${product.title}" width="" height="">`
            }
            </div>
            <div class="product-details">
              <h3 class="product-title">${product.title}</h3>
              <div class="product-price">
                <span class="current-price">${product.priceRangeV2.minVariantPrice.currencyCode} ${
        product.priceRangeV2.minVariantPrice.amount
      }</span>
                ${
                  product.compareAtPriceRange &&
                  product.compareAtPriceRange.minVariantCompareAtPrice.amount >
                    product.priceRangeV2.minVariantPrice.amount
                    ? `<span class="compare-price">${product.compareAtPriceRange.minVariantCompareAtPrice.amount}</span>`
                    : ''
                }
                <div class="quantity-selector">
                  <label for="quantity-${product.id}">x${
        bundle.products.find((p) => p.productId === product.id)?.quantity || 1
      }</label>
                </div>
              </div>
            </div>
          </div>
          ${
            product.variants.nodes[0]
              ? `<div class="product-options">
              <div class="variant-selectors">
                ${renderVariantOptions(product)}
              </div>
            </div>`
              : ''
          }
        `;

      bundleProductsContainer.appendChild(productElement);

      // Add plus icon between products
      if (index < products.length - 1) {
        const plusIcon = document.createElement('div');
        plusIcon.className = 'bundle-plus-icon';
        plusIcon.textContent = '+';
        bundleProductsContainer.appendChild(plusIcon);
      }
    });

    // Initialize the bundle total pricing after rendering all products
    updateBundleTotalPricing();
  }

  function renderVariantOptions(product) {
    if (!product.variants) return '';

    let optionsHtml = '';
    product.options.forEach((option) => {
      // Don't stringify the entire product object
      const uniqueValues = [
        ...new Set(
          product.variants.nodes
            .map((variant) => variant.selectedOptions.find((opt) => opt.name === option.name)?.value)
            .filter(Boolean)
        ),
      ];

      if (option.name != 'Title') {
        optionsHtml += `
            <div class="option-selector">
              <label for="option-${product.id}-${option.name}">${option.name}</label>
              <select id="option-${product.id}-${option.name}" 
                      class="option-select" 
                      data-option="${option.name}" 
                      data-product-id="${product.id}"
                      data-product-handle="${product.handle}">
                ${uniqueValues.map((value) => `<option value="${value}">${value}</option>`).join('')}
              </select>
            </div>`;
      }
    });

    return optionsHtml;
  }

  // Remove the individual event listeners and use event delegation instead
  document.addEventListener('change', function (event) {
    if (event.target.classList.contains('option-select')) {
      // console.log('event.target', event.target.classList.contains('option-select'));
      const productId = event.target.dataset.productId;
      const productElement = event.target.closest('.bundle-product');

      // Get all selected options for this product
      const allSelects = productElement.querySelectorAll('.option-select');
      const selectedOptions = Array.from(allSelects).map((select) => ({
        name: select.dataset.option,
        value: select.value,
      }));

      // Find the product data from the DOM
      const productTitle = productElement.querySelector('.product-title').textContent;
      const currencyCode = productElement.querySelector('.current-price').textContent.split(' ')[0];

      // Find matching variant
      updateProductVariant(productElement, productId, selectedOptions);
    }
  });

  function updateProductVariant(productElement, productId, selectedOptions) {
    // Fetch the product data again to get fresh variant information
    const shop = shopUrl;
    fetch(`${shop}/apps/product/product-variant?productId=${productId}`)
      .then((response) => response.json())
      .then((data) => {
        // console.log('datavar', data);
        if (data && data.product && data.product.variants) {
          const variants = data.product.variants.nodes;

          // Find matching variant
          const matchingVariant = variants.find((variant) =>
            variant.selectedOptions.every((option) =>
              selectedOptions.some((selected) => selected.name === option.name && selected.value === option.value)
            )
          );

          // console.log('matchingVariant', matchingVariant);

          if (matchingVariant) {
            // Update price display
            const priceElement = productElement.querySelector('.current-price');
            const comparePriceElement = productElement.querySelector('.compare-price');
            const currencyCode = priceElement.textContent.split(' ')[0];

            if (priceElement) {
              priceElement.textContent = `${currencyCode} ${matchingVariant.price}`;
            }

            if (comparePriceElement) {
              if (
                matchingVariant.compareAtPrice &&
                parseFloat(matchingVariant.compareAtPrice) > parseFloat(matchingVariant.price)
              ) {
                comparePriceElement.textContent = matchingVariant.compareAtPrice;
                comparePriceElement.style.display = 'inline';
              } else {
                comparePriceElement.style.display = 'none';
              }
            }

            // Store the selected variant ID
            productElement.setAttribute('data-variant-id', matchingVariant.id);

            // Update total bundle pricing
            updateBundleTotalPricing();
          }
        }
      })
      .catch((error) => console.error('Error fetching variant data:', error));
  }

  function updateBundleTotalPricing() {
    // console.log('updateBundleTotalPricing');
    try {
      // Get all bundle products
      const productElements = document.querySelectorAll('.bundle-product');
      if (!productElements || productElements.length === 0) {
        console.log('No product elements found');
        return;
      }

      let totalPrice = 0;
      let totalComparePrice = 0;

      // Calculate total prices
      productElements.forEach((productEl) => {
        // Get price element
        const priceElement = productEl.querySelector('.current-price');
        if (!priceElement) {
          console.log('Price element not found for a product');
          return;
        }

        // Get price value
        const priceText = priceElement.textContent;
        const priceParts = priceText.split(' ');
        if (priceParts.length < 2) {
          console.log('Invalid price format:', priceText);
          return;
        }

        const price = parseFloat(priceParts[1]);
        if (isNaN(price)) {
          console.log('Invalid price value:', priceParts[1]);
          return;
        }

        // Get quantity
        const quantityElement = productEl.querySelector('.quantity-selector label');
        const quantity = quantityElement ? parseInt(quantityElement.textContent.replace('x', '')) || 1 : 1;

        // Add to total price
        totalPrice += price * quantity;

        // Check for compare price
        const comparePriceElement = productEl.querySelector('.compare-price');
        if (comparePriceElement && comparePriceElement.style.display !== 'none') {
          const comparePrice = parseFloat(comparePriceElement.textContent);
          if (!isNaN(comparePrice)) {
            totalComparePrice += comparePrice * quantity;
          } else {
            totalComparePrice += price * quantity;
          }
        } else {
          totalComparePrice += price * quantity;
        }
      });

      // Apply bundle pricing settings if available
      let discountedPrice = totalPrice;
      const bundleData = window.bundleData;

      if (bundleData && bundleData.settings && bundleData.settings.pricing) {
        const pricingSettings = bundleData.settings.pricing;

        if (pricingSettings.option === 'percentage' && pricingSettings.discountPercentage) {
          const discountPercent = parseFloat(pricingSettings.discountPercentage) / 100;
          discountedPrice = totalPrice * (1 - discountPercent);
        } else if (pricingSettings.option === 'fixed' && pricingSettings.fixedDiscount) {
          discountedPrice = totalPrice - parseFloat(pricingSettings.fixedDiscount);
        } else if (pricingSettings.option === 'price' && pricingSettings.fixedPrice) {
          discountedPrice = parseFloat(pricingSettings.fixedPrice);
        }
      }

      // Update price displays
      const currentPriceElement = document.getElementById('bundle-current-price');
      const comparePriceElement = document.getElementById('bundle-compare-price');

      if (currentPriceElement) {
        currentPriceElement.textContent = formatMoney(discountedPrice);
      }

      if (comparePriceElement) {
        comparePriceElement.textContent = formatMoney(totalComparePrice);
        comparePriceElement.style.display = totalComparePrice > discountedPrice ? 'inline' : 'none';
      }

      console.log('Bundle pricing updated:', { totalPrice, totalComparePrice, discountedPrice });
    } catch (error) {
      console.error('Error updating bundle pricing:', error);
    }
  }

  function calculateBundlePricing(products, pricingSettings) {
    let totalPrice = 0;
    let totalComparePrice = 0;

    products.forEach((product) => {
      totalPrice += parseFloat(product.priceRangeV2.minVariantPrice.amount);
      if (
        product.compareAtPriceRange &&
        product.compareAtPriceRange.minVariantCompareAtPrice.amount > product.priceRangeV2.minVariantPrice.amount
      ) {
        totalComparePrice += parseFloat(product.compareAtPriceRange.minVariantCompareAtPrice.amount);
      }
    });

    let discountedPrice = totalPrice;

    // Apply pricing rules from settings
    if (pricingSettings) {
      if (pricingSettings.option === 'percentage' && pricingSettings.discountPercentage) {
        const discountPercent = parseFloat(pricingSettings.discountPercentage) / 100;
        discountedPrice = totalPrice * (1 - discountPercent);
      } else if (pricingSettings.option === 'fixed' && pricingSettings.fixedDiscount) {
        discountedPrice = totalPrice - parseFloat(pricingSettings.fixedDiscount);
      } else if (pricingSettings.option === 'price' && pricingSettings.fixedPrice) {
        discountedPrice = parseFloat(pricingSettings.fixedPrice);
      }
    }

    // Update price displays
    const currentPriceElement = document.getElementById('bundle-current-price');
    const comparePriceElement = document.getElementById('bundle-compare-price');

    if (currentPriceElement) {
      currentPriceElement.textContent = formatMoney(discountedPrice);
    }

    if (comparePriceElement) {
      comparePriceElement.textContent = formatMoney(totalComparePrice);
      // Hide compare price if it's the same as current price
      comparePriceElement.style.display = totalComparePrice > discountedPrice ? 'inline' : 'none';
    }
  }

  function formatMoney(amount) {
    // Basic money formatter - customize as needed for your currency format
    return '$' + parseFloat(amount).toFixed(2);
  }

  // Add event listener for the add to cart button
  document.addEventListener('click', function (event) {
    if (event.target.id === 'bundle-add-to-cart') {
      addBundleToCart();
    }
  });

  function addBundleToCart() {
    const items = [];
    let missingVariants = false;

    document.querySelectorAll('.bundle-product').forEach((productEl) => {
      // Get the variant ID if available, otherwise use product ID
      let variantId = productEl.getAttribute('data-variant-id') || productEl.getAttribute('data-product-id');

      // Extract the numeric ID from the Shopify GID format
      if (variantId && variantId.includes('gid://shopify/ProductVariant/')) {
        variantId = variantId.split('/').pop();
      } else if (variantId && variantId.includes('gid://shopify/Product/')) {
        // If we only have a product ID, we can't add it to cart
        console.warn('No variant selected for product, using default variant');
        if (productEl.querySelector('.product-options')) {
          missingVariants = true;  
          const productTitle = productEl.querySelector('.product-title').textContent;
          console.error(`Missing variant selection for product: ${productTitle}`);
        } else {  
          variantId = variantId.split('/').pop();
        }
      }

      // Get the quantity
      const quantityElement = productEl.querySelector('.quantity-selector label');
      const quantity = quantityElement ? parseInt(quantityElement.textContent.replace('x', '')) || 1 : 1;

      if (variantId) {
        items.push({
          id: parseInt(variantId),
          quantity: quantity,
        });
      }
    });

    if (items.length === 0) {
      console.error('No valid items to add to cart');

      // Show error message to user
      const addToCartButton = document.getElementById('bundle-add-to-cart');
      const originalButtonText = addToCartButton.textContent;
      addToCartButton.textContent = missingVariants ? 'Please select options' : 'Error! No items';

      setTimeout(() => {
        addToCartButton.textContent = originalButtonText;
      }, 2000);

      return;
    }

    console.log('Adding items to cart:', items);

    // Show loading state
    const addToCartButton = document.getElementById('bundle-add-to-cart');
    const originalButtonText = addToCartButton.textContent;
    addToCartButton.textContent = 'Adding...';
    addToCartButton.disabled = true;

    // Add items to cart using AJAX
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ items }),
    })
      .then((response) => {
        if (!response.ok) {
          return response.json().then((errorData) => {
            console.error('Cart error details:', errorData);
            throw new Error(errorData.description || 'Error adding to cart');
          });
        }
        return response.json();
      })
      .then((data) => {
        console.log('Products added to cart:', data);

        // Update cart count in the header if it exists
        updateCartCount();

        // Check if we should redirect to cart
        const bundleData = window.bundleData;
        if (bundleData && bundleData.settings && bundleData.settings.general && !bundleData.settings.general.skipCart) {
          window.location.href = '/cart';
        } else {
          // Show success message
          addToCartButton.textContent = 'Added!';
          setTimeout(() => {
            addToCartButton.textContent = originalButtonText;
            addToCartButton.disabled = false;
          }, 2000);
        }
      })
      .catch((error) => {
        console.error('Error adding bundle to cart:', error);
        addToCartButton.textContent = error.message || 'Error! Try Again';
        setTimeout(() => {
          addToCartButton.textContent = originalButtonText;
          addToCartButton.disabled = false;
        }, 2000);
      });
  }

  // Helper function to update cart count in the header
  function updateCartCount() {
    fetch('/cart.js')
      .then((response) => response.json())
      .then((cart) => {
        const cartCountElements = document.querySelectorAll('.cart-count-bubble span, .cart-count');
        cartCountElements.forEach((element) => {
          if (element) {
            element.textContent = cart.item_count;

            // Make sure the count is visible
            const bubble = element.closest('.cart-count-bubble');
            if (bubble) {
              bubble.style.display = cart.item_count > 0 ? 'flex' : 'none';
            }
          }
        });
      })
      .catch((error) => console.error('Error fetching cart:', error));
  }
</script>
