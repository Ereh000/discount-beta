<!-- extensions/product-bundle/blocks/volume-discount.liquid -->

<div class="vd-volume-bundle" style="display: none;">
  <div class="vs-container">
    <!-- Content will be dynamically generated -->
  </div>
</div>

{% schema %}
{
  "name": "Volume Discount",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Choose your offer"
    },
    {
      "type": "checkbox",
      "id": "show_only_published",
      "label": "Show only published volume discounts",
      "default": true
    }
  ]
}
{% endschema %}

<script>
  window.addEventListener('DOMContentLoaded', function () {
    // Get shop URL from Shopify global
    const shopUrl = `https://${window.Shopify.shop}`;

    // Get current product data
    const productData = {
      price: {{ product.price | money_without_currency | json }},
      id: {{ product.id | json }},
      handle: {{ product.handle | json }},
      variants: {{ product.variants | json }}
    };

    let selectedOfferIndex = 0;
    let currentVolumeData = null;

    // Helper to convert RGBA object to CSS rgba() string
    const rgbaToString = (color) => {
      if (
        !color ||
        typeof color.red !== 'number' ||
        typeof color.green !== 'number' ||
        typeof color.blue !== 'number' ||
        typeof color.alpha !== 'number'
      ) {
        return 'rgba(0, 0, 0, 1)'; // Default to black if invalid
      }
      return `rgba(${color.red}, ${color.green}, ${color.blue}, ${color.alpha})`;
    };

    // Helper to map font style string to CSS font-weight
    const getFontWeight = (fontStyle) => {
      switch (fontStyle) {
        case 'Lighter':
          return '300';
        case 'Regular':
          return '400';
        case 'Bold':
          return '700';
        case 'Bolder':
          return '900';
        default:
          return '400';
      }
    };

    // Helper to format price
    const formatPrice = (price) => {
      if (typeof price === 'string' && price.includes('₹')) {
        return price;
      }
      return `₹${parseFloat(price).toFixed(2)}`;
    };

    // Helper to calculate discounted price
    const calculatePrice = (offer, basePrice) => {
      if (!offer || !offer.priceAmount || offer.priceAmount === "") {
        return basePrice;
      }

      const discountValue = parseFloat(offer.priceAmount);
      
      if (offer.priceValue === "discount_percentage") {
        return basePrice - (basePrice * discountValue / 100);
      } else if (offer.priceValue === "fixed_amount") {
        return Math.max(0, basePrice - discountValue);
      }
      
      return basePrice;
    };

    // Helper to generate pricing for offers
    const generateOfferPricing = (offer) => {
      const basePricePerItem = parseFloat(productData.price) || 100;
      const quantity = parseInt(offer.quantity) || 1;
      const totalBasePrice = basePricePerItem * quantity;
      
      if (offer.priceAmount && offer.priceAmount !== "") {
        const discountedPrice = calculatePrice(offer, totalBasePrice);
        return {
          price: discountedPrice,
          compareAtPrice: totalBasePrice > discountedPrice ? totalBasePrice : null,
          pricePerItem: discountedPrice / quantity
        };
      }
      
      return { 
        price: totalBasePrice, 
        compareAtPrice: null,
        pricePerItem: basePricePerItem
      };
    };

    // Main fetch and render function
    const loadVolumeDiscount = () => {
      fetch(`${shopUrl}/apps/vol-api/volume-discount`)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then((data) => {
          console.log('Fetched volume discount data:', data);

          // Check if we have valid data
          if (!data.success || !data.data || !Array.isArray(data.data) || data.data.length === 0) {
            console.warn('No volume discount data found.');
            return hideVolumeBlock();
          }

          // Get published volumes
          const publishedVolumes = data.data.filter(volume => volume.status === 'published');
          const volumeData = publishedVolumes.length > 0 ? publishedVolumes[0] : data.data[0];

          if (!volumeData || !volumeData.settings) {
            console.warn('Volume discount settings not found.');
            return hideVolumeBlock();
          }

          currentVolumeData = volumeData;
          selectedOfferIndex = volumeData.settings.offerSettings?.selectedOfferIndex || 0;
          renderVolumeDiscount(volumeData);
        })
        .catch((error) => {
          console.error('Error fetching volume discount settings:', error);
          hideVolumeBlock();
        });
    };

    // Function to hide the volume discount block
    const hideVolumeBlock = () => {
      const vdBlock = document.querySelector('.vd-volume-bundle');
      if (vdBlock) vdBlock.style.display = 'none';
    };

    // Function to show the volume discount block
    const showVolumeBlock = () => {
      const vdBlock = document.querySelector('.vd-volume-bundle');
      if (vdBlock) vdBlock.style.display = 'block';
    };

    // Main render function
    const renderVolumeDiscount = (volumeData) => {
      const settings = volumeData.settings;
      const { bundleSettings, offerSettings, designSettings, advancedSettings } = settings;

      const vdContainer = document.querySelector('.vd-volume-bundle .vs-container');
      if (!vdContainer) {
        console.error('Volume discount container not found.');
        return;
      }

      // Clear existing content
      vdContainer.innerHTML = '';

      // Check visibility settings
      if (bundleSettings?.visibilitySettings?.visibility === 'specific_products') {
        // You would need to implement product-specific logic here
        // For now, we'll show it on all products
      }

      // 1. Render Header
      renderHeader(vdContainer, bundleSettings, designSettings);

      // 2. Render Offers
      renderOffers(vdContainer, offerSettings, bundleSettings, designSettings, advancedSettings);

      // 3. Render Add to Cart Button
      renderAddToCartButton(vdContainer, offerSettings);

      // Show the block
      showVolumeBlock();
    };

    // Function to render header
    const renderHeader = (container, bundleSettings, designSettings) => {
      const headerDiv = document.createElement('div');
      headerDiv.style.cssText = `
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin-bottom: 16px;
      `;

      const headerTextDiv = document.createElement('div');
      headerTextDiv.className = 'preview-header';
      headerTextDiv.style.cssText = `
        text-align: ${bundleSettings?.headerSettings?.alignment || 'center'};
        color: ${rgbaToString(designSettings?.textColors?.header)};
        font-size: ${designSettings?.typographySettings?.header?.size || 16}px;
        font-weight: ${getFontWeight(designSettings?.typographySettings?.header?.fontStyle)};
        white-space: nowrap;
        padding: 0 16px;
      `;
      headerTextDiv.textContent = bundleSettings?.headerSettings?.headerText || 'Choose your offer';

      if (bundleSettings?.headerSettings?.headerLine) {
        const lineThickness = bundleSettings?.headerSettings?.lineThickness || 2;
        const lineColor = rgbaToString(designSettings?.backgroundColors?.border);
        
        const leftLine = document.createElement('span');
        leftLine.style.cssText = `
          flex: 1;
          height: ${lineThickness}px;
          background: ${lineColor};
        `;
        
        const rightLine = document.createElement('span');
        rightLine.style.cssText = `
          flex: 1;
          height: ${lineThickness}px;
          background: ${lineColor};
        `;

        headerDiv.appendChild(leftLine);
        headerDiv.appendChild(headerTextDiv);
        headerDiv.appendChild(rightLine);
      } else {
        headerDiv.appendChild(headerTextDiv);
      }

      container.appendChild(headerDiv);
    };

    // Function to render offers
    const renderOffers = (container, offerSettings, bundleSettings, designSettings, advancedSettings) => {
      if (!offerSettings?.offers || !Array.isArray(offerSettings.offers)) {
        console.warn('No offers found in volume discount settings.');
        return;
      }

      const offersContainer = document.createElement('div');
      offersContainer.className = 'offers-container';

      offerSettings.offers.forEach((offer, index) => {
        const isSelected = index === selectedOfferIndex;
        const offerItem = createOfferItem(offer, index, isSelected, bundleSettings, designSettings, advancedSettings);
        offersContainer.appendChild(offerItem);
      });

      container.appendChild(offersContainer);
    };

    // Function to create individual offer item
    const createOfferItem = (offer, index, isSelected, bundleSettings, designSettings, advancedSettings) => {
      const offerItem = document.createElement('div');
      offerItem.className = 'offer-item';
      offerItem.style.cssText = `
        background-color: ${isSelected 
          ? rgbaToString(designSettings?.backgroundColors?.selectedBundle)
          : rgbaToString(designSettings?.backgroundColors?.bundle)};
        border-radius: ${bundleSettings?.shapeSettings?.blockRadius || 12}px;
        border: ${bundleSettings?.shapeSettings?.blockThickness || 2}px solid ${
          isSelected
            ? rgbaToString(designSettings?.backgroundColors?.borderSelectedBundle)
            : rgbaToString(designSettings?.backgroundColors?.border)
        };
        padding: 16px;
        margin-bottom: 12px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        cursor: pointer;
        transition: all 0.2s ease;
      `;

      // Add click handler for offer selection
      offerItem.addEventListener('click', () => selectOffer(index));

      // Left content (checkmark + text)
      const leftContent = document.createElement('div');
      leftContent.style.cssText = 'display: flex; align-items: center;';

      // Add checkmark if enabled
      const showRadioButtons = bundleSettings?.checkmarkSettings?.checkmarkVisibility === "show" || 
                             bundleSettings?.checkmarkSettings?.checkmarkVisibility === "showRadio";
      
      if (showRadioButtons) {
        const checkmark = createCheckmark(isSelected, designSettings);
        leftContent.appendChild(checkmark);
      }

      // Add text content
      const textContent = createTextContent(offer, designSettings);
      leftContent.appendChild(textContent);

      offerItem.appendChild(leftContent);

      // Right content (price)
      const rightContent = createPriceContent(offer, designSettings, advancedSettings);
      offerItem.appendChild(rightContent);

      // Add highlight tag if applicable
      if (offer?.highlight && offer?.highlightSettings?.text) {
        const highlightTag = createHighlightTag(offer, designSettings, bundleSettings);
        offerItem.appendChild(highlightTag);
      }

      return offerItem;
    };

    // Function to create checkmark
    const createCheckmark = (isSelected, designSettings) => {
      const checkmarkDiv = document.createElement('div');
      checkmarkDiv.style.cssText = `
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 2px solid ${rgbaToString(designSettings?.backgroundColors?.border)};
        margin-right: 12px;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: ${isSelected ? rgbaToString(designSettings?.backgroundColors?.checkmark) : 'transparent'};
      `;

      if (isSelected) {
        const innerCheckmark = document.createElement('div');
        innerCheckmark.style.cssText = `
          width: 12px;
          height: 12px;
          border-radius: 50%;
          background-color: ${rgbaToString(designSettings?.textColors?.highlight) || '#5C3D99'};
        `;
        checkmarkDiv.appendChild(innerCheckmark);
      }

      return checkmarkDiv;
    };

    // Function to create text content
    const createTextContent = (offer, designSettings) => {
      const textContent = document.createElement('div');

      const titleDiv = document.createElement('div');
      titleDiv.style.cssText = `
        color: ${rgbaToString(designSettings?.textColors?.title)};
        font-size: ${designSettings?.typographySettings?.titlePrice?.size || 16}px;
        font-weight: ${getFontWeight(designSettings?.typographySettings?.titlePrice?.fontStyle)};
        margin-bottom: 4px;
      `;
      titleDiv.textContent = offer?.title || '';

      const subtitleDiv = document.createElement('div');
      subtitleDiv.style.cssText = `
        color: ${rgbaToString(designSettings?.textColors?.subtitle)};
        font-size: ${designSettings?.typographySettings?.subtitleComparedPrice?.size || 14}px;
        font-weight: ${getFontWeight(designSettings?.typographySettings?.subtitleComparedPrice?.fontStyle)};
      `;
      subtitleDiv.textContent = offer?.subtitle || '';

      textContent.appendChild(titleDiv);
      textContent.appendChild(subtitleDiv);

      return textContent;
    };

    // Function to create price content
    const createPriceContent = (offer, designSettings, advancedSettings) => {
      const rightContent = document.createElement('div');
      rightContent.style.textAlign = 'right';

      const pricing = generateOfferPricing(offer);

      // Show price per item if enabled
      if (advancedSettings?.pricing?.showPricesPerItem) {
        const pricePerItemDiv = document.createElement('div');
        pricePerItemDiv.style.cssText = `
          color: ${rgbaToString(designSettings?.textColors?.subtitle)};
          font-size: ${parseInt(designSettings?.typographySettings?.subtitleComparedPrice?.size || 14) - 2}px;
          margin-bottom: 2px;
        `;
        pricePerItemDiv.textContent = `${formatPrice(pricing.pricePerItem)} each`;
        rightContent.appendChild(pricePerItemDiv);
      }
      
      // Main price
      const priceDiv = document.createElement('div');
      priceDiv.style.cssText = `
        color: ${rgbaToString(designSettings?.pricingColors?.price)};
        font-size: ${designSettings?.typographySettings?.titlePrice?.size || 16}px;
        font-weight: ${getFontWeight(designSettings?.typographySettings?.titlePrice?.fontStyle)};
      `;
      priceDiv.textContent = formatPrice(pricing.price);
      rightContent.appendChild(priceDiv);

      // Compare at price if enabled and available
      if (pricing.compareAtPrice && advancedSettings?.pricing?.showCompareAtPrice) {
        const compareAtPriceDiv = document.createElement('div');
        compareAtPriceDiv.style.cssText = `
          color: ${rgbaToString(designSettings?.pricingColors?.comparedPrice)};
          font-size: ${designSettings?.typographySettings?.subtitleComparedPrice?.size || 14}px;
          font-weight: ${getFontWeight(designSettings?.typographySettings?.subtitleComparedPrice?.fontStyle)};
          text-decoration: line-through;
        `;
        compareAtPriceDiv.textContent = formatPrice(pricing.compareAtPrice);
        rightContent.appendChild(compareAtPriceDiv);
      }

      return rightContent;
    };

    // Function to create highlight tag
    const createHighlightTag = (offer, designSettings, bundleSettings) => {
      const highlightTag = document.createElement('div');
      const shape = offer?.highlightSettings?.shape || 'rounded';
      const style = offer?.highlightSettings?.style || 'pill';
      
      let borderRadius = '12px';
      if (style === 'rectangle') {
        borderRadius = '4px';
      } else if (shape === 'square') {
        borderRadius = '2px';
      }

      highlightTag.style.cssText = `
        position: absolute;
        top: -10px;
        right: 20px;
        background-color: ${rgbaToString(designSettings?.backgroundColors?.highlight)};
        color: ${rgbaToString(designSettings?.textColors?.highlight)};
        padding: 4px 8px;
        border-radius: ${borderRadius};
        font-size: ${designSettings?.typographySettings?.tagHighlight?.size || 12}px;
        font-weight: ${getFontWeight(designSettings?.typographySettings?.tagHighlight?.fontStyle)};
        z-index: 1;
        ${offer?.highlightSettings?.blinking ? 'animation: blink 1s linear infinite;' : ''}
      `;
      highlightTag.textContent = offer?.highlightSettings?.text || '';

      return highlightTag;
    };

    // Function to render add to cart button
    const renderAddToCartButton = (container, offerSettings) => {
      const buttonDiv = document.createElement('button');
      buttonDiv.style.cssText = `
        margin-top: 16px;
        background-color: #f0f0f0;
        color: #999;
        border: none;
        padding: 14px;
        border-radius: 6px;
        cursor: not-allowed;
        text-align: center;
        font-size: 16px;
        font-weight: 600;
        width: 100%;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      `;
      buttonDiv.textContent = 'ADD TO CART';
      
      // Add click handler (you can implement actual cart functionality here)
      buttonDiv.addEventListener('click', () => {
        console.log('Add to cart clicked', {
          selectedOfferIndex,
          selectedOffer: offerSettings?.offers?.[selectedOfferIndex]
        });
        // Implement your cart logic here
      });

      container.appendChild(buttonDiv);
    };

    // Function to handle offer selection
    const selectOffer = (newSelectedIndex) => {
      console.log('Selected offer index:', newSelectedIndex);
      
      if (newSelectedIndex === selectedOfferIndex) return;
      
      selectedOfferIndex = newSelectedIndex;
      
      // Re-render the volume discount with new selection
      if (currentVolumeData) {
        renderVolumeDiscount(currentVolumeData);
      }
    };

    // Add CSS for animations and hover effects
    const style = document.createElement('style');
    style.textContent = `
      @keyframes blink {
        0%, 50% { opacity: 1; }
        51%, 100% { opacity: 0.5; }
      }
      
      .offer-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      }
      
      .vd-volume-bundle {
        margin: 20px 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
      }
    `;
    document.head.appendChild(style);

    // Initialize the volume discount
    loadVolumeDiscount();
  });
</script>
